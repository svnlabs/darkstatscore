@page
@model IndexModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="table-responsive">
  <table class="table table-condensed">
		<thead>
          <tr>
            <th>Data For</th>
            <th>Total</th>
            <th>Total Today</th>
          </tr>
        </thead>
        <tbody>
            <tr>
                <td id="monthstring"></td>
                <td>
                    <a id="monthtotal" href="#" data-toggle="tooltip" title=""></a>
                </td>
				<td>
                	<a id="todaytotal" href="#" data-toggle="tooltip" title=""></a>
				</td>
            </tr>
        </tbody>
		<thead>
          <tr>
            <th>Current Speed</th>
            <th>This Hour</th>
            <th>This Month</th>
          </tr>
        </thead>
        <tbody>
            <tr>
                <td id="lastcheckspeed"></td>
                <td id="currenthourspeed"></td>
                <td id="monthspeed"></td>
            </tr>
        </tbody>
  </table>
</div>

<style>
.ct-label {
    font-size: 12px;
	white-space: nowrap;
}
</style>

<div class="row">
	<div class="col-sm-8">
        <div class="ct-chart ct-golden-section"></div>
    </div>
    <div class="col-sm-4 table-responsive">
		<table class="table table-condensed table-hover">
			<thead>
				<tr>
					<th>Host</th>
					<th>Speed</th>
				</tr>
			</thead>
			<tbody id="speedTable"></tbody>
		</table>
	</div>
</div>
<script src="~/lib/chartist/chartist.min.js"></script>
<script type="text/javascript">
        if (typeof Promise === 'undefined') {
            document.write('<script type="text/javascript" src="/lib/signalr/signalr-clientES5-1.0.0-alpha2-final.min.js"><\/script>');
        }
        else {
            document.write('<script type="text/javascript" src="/lib/signalr/signalr-client-1.0.0-alpha2-final.min.js"><\/script>');
        }
    </script>
<script>
	var data = {
      series: [
	        [ ]
	    ]
	};
	var options = {
	    showArea: true,
	    axisY: {
	        offset: 80,
	        labelInterpolationFnc: function(value) {
        	    return value + " Mbps";
        	}
	    }
    };

    var chart = new Chartist.Line(".ct-chart", data, options);
    let logger = new signalR.ConsoleLogger(signalR.LogLevel.Information);
    let connection = new signalR.HubConnection("/dashboard", { logger: logger });
    connection.start().then(function () {
	    connection.invoke("GetDashboard").then(function (dashboard) {
            processDashboardStream(dashboard);
        });
	})
	.then(function () {
	    connection.invoke("GetCurrentDeltas").then(function (deltas) {
	        $.each(deltas, function(index, value) {
				if (value > 0)
				{
					var newd = (bytesToBitsPs(value, @Model.SaveTime) / 1024 / 1024).toFixed(2);
					data.series[0].push(newd);
				}
	        });
	        chart.update();
	    });
	});

	connection.on("GetLiveDeltas", function(deltas) {
		processDeltasStream(deltas);
	});

	connection.on("GetCurrentDashboard", function(dashboard) {
		processDashboardStream(dashboard);
	});

    function processDashboardStream(dashboard) {
        $("#monthstring").html(dashboard.CurrentMonthString);
        $("#lastgathered").html(dashboard.LastGathered);
        $("#scrapetimeavg").html(Math.round(dashboard.ScrapeTimeAvg));
        $("#currenthourspeed").html(dashboard.CurrentHour);
        $("#monthspeed").html(dashboard.CurrentMonth);
        $("#monthtotal").html(bytesToString(dashboard.CurrentMonthTotalIn + dashboard.CurrentMonthTotalOut));
        updateTotalsTooltip("#monthtotal", dashboard.CurrentMonthTotalIn, dashboard.CurrentMonthTotalOut);
		$("#todaytotal").html(bytesToString(dashboard.CurrentDayTotalIn + dashboard.CurrentDayTotalOut));
        updateTotalsTooltip("#todaytotal", dashboard.CurrentDayTotalIn, dashboard.CurrentDayTotalOut);
	}

    function processDeltasStream(deltas) {
		var deltasToKeep = 30;
		var chartLength = data.series[0].length;
	    if (chartLength >= deltasToKeep)
	    {
			var remove = (chartLength == deltasToKeep) ? 1 : chartLength - deltasToKeep;
	        data.series[0].splice(0, remove);
	    }
	    if (deltas.Deltas.length == 0)
	    {
			return;
	    }
		var totalDelta = deltas.Deltas.reduce(getDeltaSum, 0);
	    $("#lastcheckspeed").html(bytesToBitsPsToString(totalDelta, deltas.ElapsedMs));
	    delta = (bytesToBitsPs(totalDelta, deltas.ElapsedMs) / 1024 / 1024).toFixed(2);   
        data.series[0].push(delta)
	    chart.update();
	    $("#speedTable").empty();
        $.each(deltas.Deltas, function(index, value) {
            $("#speedTable").append("<tr><td>" + value.Hostname + "</td><td>" + bytesToBitsPsToString(value.Speed, deltas.ElapsedMs) + "</td></tr>");
        });
	}

	function updateTotalsTooltip(id, indouble, outdouble)
	{
		var instring = bytesToString(indouble);
		var outstring = bytesToString(outdouble);
		$(id).attr("title", "In: " + instring + "<br>Out: " + outstring).tooltip("fixTitle");
	}

	function bytesToBitsPs(bytes, ms)
	{
        return bytes * 8 / (ms / 1000);
	}

	function bytesToString(bytes)
	{
	    var suffix = [ "B", "KB", "MB", "GB" ];
	    var i = 0;
	    var newBytes = bytes;
        for (i = 0; i < suffix.length - 1 && bytes >= 1024; i++)
    	{
	        newBytes = bytes / 1024;
            bytes = bytes / 1024;
        }
	    return newBytes.toFixed(2) + " " + suffix[i];
	}

	function bytesToBitsPsToString(bytes, ms)
	{
        var bits = bytesToBitsPs(bytes, ms);
	    var suffix = [ "bps", "Kbps", "Mbps", "Gbps" ];
	    var i = 0;
	    var newBits = bits;
        for (i = 0; i < suffix.length - 1 && bits >= 1024; i++)
    	{
	        newBits = bits / 1024;
	        bits = bits / 1024;
    	}
	    return newBits.toFixed(2) + " " + suffix[i];
	}

	function getDeltaSum(total, delta) {
        return total + delta.Speed;
    }
</script>

<h6>
	Stats last gathered: <span id="lastgathered"></span> (<span id="scrapetimeavg"></span>ms avg)
</h6>